[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "comunio-backend"
version = "1.0.0"
description = "Backend API para gestión de datos de Comunio"
authors = [
    {name = "Tu Nombre", email = "tu.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "selenium>=4.15.0",
    "webdriver-manager>=4.0.0",
    "python-dotenv>=1.0.0",
    "unidecode>=1.3.0",
    "pymongo[srv]>=4.6.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.8",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.6.0",
    "httpx>=0.25.0",  # Para testing de FastAPI
]

# ===================================
# RUFF CONFIGURATION (Linter + Formatter)
# ===================================
[tool.ruff]
# Configuración general
target-version = "py311"
line-length = 88
indent-width = 4

# Archivos a incluir/excluir
extend-exclude = [
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
    "migrations",
]

[tool.ruff.lint]
# Reglas activadas
select = [
    # Pycodestyle
    "E",  # Error
    "W",  # Warning
    
    # Pyflakes
    "F",  # Pyflakes
    
    # isort
    "I",  # Import sorting
    
    # pep8-naming
    "N",  # Naming conventions
    
    # pydocstyle
    "D",  # Docstring conventions
    
    # pyupgrade
    "UP",  # Upgrade syntax
    
    # flake8-bugbear
    "B",  # Bug and design problems
    
    # flake8-simplify
    "SIM",  # Simplify code
    
    # flake8-comprehensions
    "C4",  # List/dict comprehensions
    
    # flake8-pie
    "PIE",  # Misc lints
    
    # flake8-bandit
    "S",  # Security
    
    # flake8-blind-except
    "BLE",  # Blind except
    
    # flake8-boolean-trap
    "FBT",  # Boolean trap
    
    # flake8-unused-arguments
    "ARG",  # Unused arguments
    
    # flake8-use-pathlib
    "PTH",  # Use pathlib
    
    # Pylint
    "PL",  # Pylint rules
    
    # Ruff-specific
    "RUF",  # Ruff-specific rules
]

# Reglas desactivadas
ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "E501",  # Line too long (manejado por el formatter)
    "S101",  # Use of assert (necesario para tests)
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default arg in function definition
    "PLR0913", # Too many arguments to function call
    "ARG002", # Unused method argument (útil en interfaces)
]

# Reglas por archivo
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Imported but unused
"tests/*" = ["S101", "ARG", "PLR2004"]  # Assert, unused args, magic values
"**/test_*.py" = ["S101", "ARG", "PLR2004"]
"scripts/*" = ["T201"]  # Print statements

[tool.ruff.lint.isort]
# Configuración de imports
known-first-party = ["shared", "api", "context"]
known-third-party = ["fastapi", "pydantic", "pymongo"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
# Estilo de docstrings
convention = "google"

[tool.ruff.format]
# Configuración del formateador
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

# ===================================
# MYPY CONFIGURATION (Type Checking)
# ===================================
[tool.mypy]
# Configuración general
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

# Paths
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
]

# Plugins
plugins = ["pydantic.mypy"]

# Configuración por módulo
[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "webdriver_manager.*",
    "bs4.*",
    "pymongo.*",
    "bson.*",
]
ignore_missing_imports = true

# ===================================
# PYTEST CONFIGURATION
# ===================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# ===================================
# COVERAGE CONFIGURATION
# ===================================
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"